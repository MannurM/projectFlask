# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import make_number, check_input

# import mastermind_engine
# print(dir(mastermind_engine))
answer = input('Хотите  сыграть партию  y/n? ')
if answer == 'y' or answer == 'Y':  # TODO Эта проверка лишняя
    while answer != 'y' or answer != 'Y':  # TODO Цикл не начнётся, пока y или Y не будет в ответе
        # TODO кстати перебирать варианты легче таким условием answer in ('y', 'Y', 'yes', и тд)

        guess_number = make_number()
        print('Число загадано!')
        check_number = '0'
        count = 1  # TODO А почему с 1 отсчёт идет?

        while not check_number == guess_number:
            # TODO Я бы советовал код получения числа и проверки этого числа
            # TODO вынести в отдельную функцию, которая бы запускала в цикле input-ы до тех пор
            # TODO Пока введенное число не будет соответствовать всем требованиям
            print('Ход', count)
            check_number = input('Введите ваше число:')

            n_digit = check_number  # TODO зачем лишняя переменная создаётся?
            if not n_digit.isdigit():
                print('Вы ввели не число', check_number, ',', 'попробуйте еще раз')
                continue

            if int(check_number) < 1023 or int(check_number) > 9876:
                print('Вы ввели некорректное число', check_number, ',', 'попробуйте еще раз')
                continue

            check_number_set = {check_number[0], check_number[1], check_number[2], check_number[3]}
            # TODO можно попробовать set(list(check_number))

            if len(check_number_set) < 4:
                print('Вы ввели некорректное число - с одинаковыми цифрами', check_number, ',', 'попробуйте еще раз')
                continue

            cow, bull = check_input(check_number)
            print('cows -', cow, 'цифры есть в числе')
            print('bulls -', bull, 'цифры на своем месте')

            if bull == 4 and cow == 4:
                print('Число угадано!!!')
                print('Отгадано на', count, 'ходу')
            count += 1

        answer = input('Хотите  еще партию  y/n? ')
        if answer == 'y' or answer == 'Y':
            continue
        else:
            break

print('Тогда давай - до свидания!')
