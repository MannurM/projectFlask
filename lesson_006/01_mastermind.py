# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import make_number, check_input, count
# import mastermind_engine
# print(dir(mastermind_engine))
make_number()
print('Число загадано!')
check_input()
print('Отгадано на', count, 'ходу')

answer = input('хотите еще партию y/n? ')
# TODO Тут нужен цикл, возможно даже не один,
# TODO 1) Чтобы загадывалось число,
# TODO 2) затем в цикле у пользователя запрашивался input до тех пор, пока он не введет правильное число
# TODO т.е. нужно после ввода делать проверки ещё
# TODO 3) Проверить число пользователя на наличие быков и коров
# TODO Если угадал 4 быка - спросить, хочет ли он начать игру заново, если Да - продолжать цикл, загадав новое число
# TODO Если не угадал - продолжить цикл с тем же числом (т.е. заново спросить ввод пользователя и тд)
if answer == 'y' or answer == 'Y':
    make_number()
    print('Число загадано!')
    check_input()
    print('Отгадано на', count, 'ходу')
print('Тогда давай - до свидания!')

# может лучше сделать рекурсию? TODO Нет, к рекурсии стоит прибегать в последнюю очередь
# TODO Она сложнее и затратнее по ресурсам, чем цикл.
# def game_bulls_cows():
#     from mastermind_engine import make_number, check_input, count
#
#     make_number()
#     print('Число загадано!')

#     check_input()
#     print('Отгадано на', count, 'ходу')
#
#     answer = input('хотите еще партию? y/n')
#
#     if answer == 'y' or answer == 'Y':
#         game_bulls_cows()
#     print('Тогда давай - до свидания!')
#
#
# game_bulls_cows()